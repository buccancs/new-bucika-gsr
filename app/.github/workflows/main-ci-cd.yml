name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION_DEFAULT: '3.10'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Fast validation for quick feedback
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.python }}
      gradle-cache-key: ${{ steps.cache-key.outputs.gradle }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate cache keys
      id: cache-key
      run: |
        echo "python=${{ runner.os }}-pip-${{ env.PYTHON_VERSION_DEFAULT }}-${{ hashFiles('**/pyproject.toml', '**/test-requirements.txt') }}" >> $GITHUB_OUTPUT
        echo "gradle=${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}" >> $GITHUB_OUTPUT
    
    - name: Validate project structure
      run: |
        echo "‚úÖ Validating project structure..."
        [ -f "pyproject.toml" ] && echo "‚úÖ Python project configuration found"
        [ -f "build.gradle" ] && echo "‚úÖ Android project configuration found"
        [ -d "tests_unified" ] && echo "‚úÖ Unified test framework found"
        [ -d "shared_protocols" ] && echo "‚úÖ Shared protocols module found"
        [ -f ".github/workflows/main-ci-cd.yml" ] && echo "‚úÖ Main CI/CD workflow found"

  # Python testing and validation
  python-validation:
    name: Python Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ needs.quick-validation.outputs.python-cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION_DEFAULT }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Code quality checks
      run: |
        echo "üîç Running code quality checks..."
        
        # Format checking (non-blocking for quick feedback)
        echo "::group::Black formatting check"
        black --check --diff PythonApp/ shared_protocols/ || echo "::warning::Code formatting issues found"
        echo "::endgroup::"
        
        echo "::group::Import sorting check"
        isort --check-only --diff PythonApp/ shared_protocols/ || echo "::warning::Import sorting issues found"
        echo "::endgroup::"
        
        echo "::group::Flake8 linting"
        flake8 PythonApp/ shared_protocols/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "::warning::Syntax errors found"
        echo "::endgroup::"
    
    - name: Security scan (quick)
      run: |
        echo "üîí Running quick security scan..."
        pip install bandit safety
        
        # Quick security checks
        bandit -r PythonApp/ shared_protocols/ -ll -i || echo "::warning::Security issues found"
        safety check --short-report || echo "::warning::Vulnerable dependencies found"
    
    - name: Unit tests
      run: |
        echo "üß™ Running Python unit tests..."
        mkdir -p htmlcov
        
        # Run unified testing framework for unit tests in quick mode
        python tests_unified/runners/run_unified_tests.py --level unit --mode ci --quick
    
    - name: Upload Python coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Android validation
  android-validation:
    name: Android Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ needs.quick-validation.outputs.gradle-cache-key }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Setup Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew --stop || true
        rm -rf ~/.gradle/caches/*/dependencies-accessors/ || true
        ./gradlew --version --no-daemon
    
    - name: Generate build constants
      run: ./gradlew generateConstants --no-daemon
    
    - name: Lint Android code
      run: |
        echo "üîç Running Android linting..."
        ./gradlew lintDevDebug --continue --no-daemon || echo "::warning::Android linting issues found"
    
    - name: Run Detekt static analysis
      run: |
        echo "üîç Running Detekt static analysis..."
        ./gradlew detekt --no-daemon || echo "::warning::Detekt issues found"
    
    - name: Build Android app
      run: |
        echo "üèóÔ∏è Building Android app..."
        ./gradlew assembleDevDebug --continue --no-daemon
    
    - name: Run Android unit tests
      run: |
        echo "üß™ Running Android unit tests..."
        ./gradlew testDevDebugUnitTest --continue --no-daemon
    
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport --continue --no-daemon || echo "::warning::Coverage report generation failed"
    
    - name: Upload Android coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./AndroidApp/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: android
        name: android-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
    
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-build-artifacts-${{ github.run_number }}
        path: |
          AndroidApp/build/reports/
          AndroidApp/build/outputs/logs/
        retention-days: 7

  # Integration tests (conditional)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-validation, android-validation]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        python tests_unified/runners/run_unified_tests.py --level integration --mode ci --verbose
    
    - name: Run quick virtual environment test
      run: |
        echo "üåê Running quick virtual environment test..."
        if [ -d "tests_unified/integration/virtual_environment" ]; then
          cd tests_unified/integration/virtual_environment
          python test_runner.py --scenario quick --devices 2 --duration 0.5 --verbose || echo "::warning::Virtual environment test failed"
        elif [ -d "tests/integration/virtual_environment" ]; then
          cd tests/integration/virtual_environment
          python test_runner.py --scenario quick --devices 2 --duration 0.5 --verbose || echo "::warning::Virtual environment test failed"
        else
          echo "::warning::Virtual environment tests not found"
        fi

  # Final validation
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [python-validation, android-validation, integration-tests]
    if: always()
    
    steps:
    - name: Check validation results
      run: |
        echo "üìä Validation Summary:"
        echo "- Python validation: ${{ needs.python-validation.result }}"
        echo "- Android validation: ${{ needs.android-validation.result }}"
        echo "- Integration tests: ${{ needs.integration-tests.result }}"
        
        # Check for failures
        if [[ "${{ needs.python-validation.result }}" == "failure" || 
              "${{ needs.android-validation.result }}" == "failure" || 
              "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "‚ùå Some validations failed"
          exit 1
        else
          echo "‚úÖ All validations passed"
        fi
    
    - name: Comment PR with summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = `## üöÄ CI/CD Pipeline Summary
          
          **Status:** ${{ needs.python-validation.result == 'success' && needs.android-validation.result == 'success' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && '‚úÖ PASSED' || '‚ùå FAILED' }}
          
          ### Component Results
          - **Python:** ${{ needs.python-validation.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.python-validation.result }}
          - **Android:** ${{ needs.android-validation.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.android-validation.result }}
          - **Integration:** ${{ (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && '‚úÖ' || '‚ùå' }} ${{ needs.integration-tests.result }}
          
          ### Next Steps
          ${{ needs.python-validation.result == 'success' && needs.android-validation.result == 'success' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && 'üéâ Ready for comprehensive testing and merge!' || 'üîß Please address the failing checks above.' }}
          
          <details>
          <summary>üìã Quality Checklist</summary>
          
          - [x] Code formatting validated
          - [x] Static analysis completed
          - [x] Security scan performed
          - [x] Unit tests executed
          - [x] Build artifacts generated
          ${{ needs.integration-tests.result != 'skipped' && '- [x] Integration tests completed' || '- [ ] Integration tests (skipped for push)' }}
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });