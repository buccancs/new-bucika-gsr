name: Chapter 5 Testing - Fast Lane

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  fast-lane-tests:
    name: Fast Lane - Unit Tests & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r test-requirements.txt
        pip install ruff black mypy
    
    # Android Unit Tests with Coverage Gates
    - name: Android Unit Tests with Coverage
      run: |
        cd AndroidApp
        ./gradlew testDevDebugUnitTest jacocoTestReport --parallel
        
    - name: Check Android Coverage Gate (90%)
      run: |
        cd AndroidApp
        # Extract coverage percentage from JaCoCo report
        COVERAGE=$(python3 -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml')
        counter = tree.find('.//counter[@type=\"LINE\"]')
        if counter is not None:
            covered = int(counter.get('covered', 0))
            missed = int(counter.get('missed', 0))
            total = covered + missed
            if total > 0:
                coverage = (covered / total) * 100
                print(f'{coverage:.1f}')
            else:
                print('0.0')
        else:
            print('0.0')
        ")
        echo "Android Unit Test Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
          echo "❌ Android coverage ${COVERAGE}% is below 90% threshold"
          exit 1
        else
          echo "✅ Android coverage ${COVERAGE}% meets 90% threshold"
        fi
    
    # Python Unit Tests with Coverage Gates  
    - name: Python Unit Tests with Coverage
      run: |
        python -m pytest tests_unified/unit/python/ \
          --cov=PythonApp \
          --cov-report=xml:test_results/coverage-python-unit.xml \
          --cov-report=html:test_results/coverage-python-html \
          --cov-branch \
          --junitxml=test_results/junit-python-unit.xml \
          -v
    
    - name: Check Python Coverage Gate (95% branch)
      run: |
        COVERAGE=$(python3 -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('test_results/coverage-python-unit.xml')
            coverage_elem = tree.find('.//coverage')
            if coverage_elem is not None:
                branch_rate = float(coverage_elem.get('branch-rate', 0))
                coverage = branch_rate * 100
                print(f'{coverage:.1f}')
            else:
                print('0.0')
        except:
            print('0.0')
        ")
        echo "Python Branch Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 95.0" | bc -l) )); then
          echo "❌ Python branch coverage ${COVERAGE}% is below 95% threshold"
          exit 1
        else
          echo "✅ Python branch coverage ${COVERAGE}% meets 95% threshold"
        fi
    
    # Lint and Static Analysis
    - name: Android Lint - detekt
      run: |
        cd AndroidApp
        ./gradlew detekt
        
    - name: Android Lint - ktlint
      run: |
        cd AndroidApp
        ./gradlew lintKotlin
    
    - name: Python Lint - ruff
      run: |
        ruff check PythonApp/ tests_unified/ --output-format=github
        
    - name: Python Lint - black
      run: |
        black --check --diff PythonApp/ tests_unified/
        
    - name: Python Lint - mypy
      run: |
        mypy PythonApp/ --ignore-missing-imports --show-error-codes
    
    # Schema and Protocol Checks
    - name: Protocol Schema Validation
      run: |
        python -c "
        import json
        import jsonschema
        from pathlib import Path
        
        # Validate JSON protocol schemas
        schema_dir = Path('shared_protocols')
        if schema_dir.exists():
            for schema_file in schema_dir.glob('*.json'):
                try:
                    with open(schema_file) as f:
                        schema = json.load(f)
                    # Basic schema validation
                    print(f'✅ Schema {schema_file.name} is valid JSON')
                except Exception as e:
                    print(f'❌ Schema {schema_file.name} validation failed: {e}')
                    exit(1)
        "
    
    # Upload Artifacts
    - name: Upload Android Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-test-results-${{ matrix.python-version }}
        path: |
          AndroidApp/build/reports/tests/testDevDebugUnitTest/
          AndroidApp/build/reports/jacoco/jacocoTestReport/
          AndroidApp/build/reports/detekt/
    
    - name: Upload Python Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results-${{ matrix.python-version }}
        path: |
          test_results/junit-python-unit.xml
          test_results/coverage-python-unit.xml
          test_results/coverage-python-html/
    
    # Fail if coverage gates not met
    - name: Coverage Gate Summary
      run: |
        echo "📊 Coverage Gates Summary:"
        echo "  - Android Unit Tests: ≥90% line coverage ✅"
        echo "  - Python Unit Tests: ≥95% branch coverage ✅"
        echo "  - Lint/Static Analysis: All checks passed ✅"
        echo ""
        echo "🚀 Fast lane tests completed successfully!"