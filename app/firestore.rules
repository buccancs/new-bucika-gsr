rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isOwner(resourceData) {
      return isAuthenticated() && resourceData.researcherId == getUserId();
    }
    
    function isPrincipalInvestigator() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/researcher_profiles/$(getUserId())).data.researcherType == 'PRINCIPAL_INVESTIGATOR';
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/researcher_profiles/$(getUserId())).data.researcherType == 'ADMIN';
    }
    
    function isCollaborator(resourceData) {
      return isAuthenticated() && 
             (resourceData.collaborators != null && 
              getUserId() in resourceData.collaborators);
    }
    
    function canReadResearchData(resourceData) {
      return isOwner(resourceData) || 
             isCollaborator(resourceData) || 
             isPrincipalInvestigator() || 
             isAdmin();
    }
    
    function canWriteResearchData(resourceData) {
      return isOwner(resourceData) || 
             isCollaborator(resourceData) || 
             isAdmin();
    }
    
    // Researcher profiles - users can only access their own profile
    match /researcher_profiles/{userId} {
      allow read, write: if isAuthenticated() && getUserId() == userId;
      allow read: if isAdmin() || isPrincipalInvestigator();
    }
    
    // Recording sessions - core research data with strict access control
    match /recording_sessions/{sessionId} {
      allow read: if canReadResearchData(resource.data);
      allow create: if isAuthenticated() && 
                      request.resource.data.researcherId == getUserId() &&
                      request.resource.data.keys().hasAll(['sessionId', 'startTime', 'researcherId']);
      allow update: if canWriteResearchData(resource.data) &&
                      request.resource.data.researcherId == resource.data.researcherId; // Can't change owner
      allow delete: if isOwner(resource.data) || isAdmin();
    }
    
    // Calibration data - tied to specific researchers
    match /calibration_data/{calibrationId} {
      allow read, write: if isAuthenticated() && 
                           (resource == null || resource.data.researcherId == getUserId() ||
                            canReadResearchData(resource.data));
      allow create: if isAuthenticated() && 
                      request.resource.data.researcherId == getUserId();
    }
    
    // System errors - for debugging and monitoring
    match /system_errors/{errorId} {
      allow read: if isAdmin() || isPrincipalInvestigator();
      allow write: if isAuthenticated(); // Anyone can report errors
    }
    
    // Analytics data - read-only for most users
    match /analytics_data/{dataId} {
      allow read: if isAdmin() || isPrincipalInvestigator();
      allow write: if isAdmin();
    }
    
    // Research projects - group multiple sessions under projects
    match /research_projects/{projectId} {
      allow read: if canReadResearchData(resource.data);
      allow create: if isAuthenticated() && 
                      request.resource.data.principalInvestigator == getUserId();
      allow update: if resource.data.principalInvestigator == getUserId() || 
                      isCollaborator(resource.data) || 
                      isAdmin();
      allow delete: if resource.data.principalInvestigator == getUserId() || isAdmin();
    }
    
    // File metadata - tracks uploaded files
    match /file_metadata/{fileId} {
      allow read: if canReadResearchData(resource.data);
      allow write: if canWriteResearchData(resource.data) || 
                     (resource == null && isAuthenticated());
    }
    
    // Audit logs - admin only access
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side functions can write audit logs
    }
    
    // Collaboration invites - for adding researchers to projects
    match /collaboration_invites/{inviteId} {
      allow read: if isAuthenticated() && 
                    (resource.data.invitedUserId == getUserId() || 
                     resource.data.invitingUserId == getUserId() ||
                     isAdmin());
      allow create: if isAuthenticated() && 
                      request.resource.data.invitingUserId == getUserId();
      allow update: if isAuthenticated() && 
                      (resource.data.invitedUserId == getUserId() || 
                       resource.data.invitingUserId == getUserId());
      allow delete: if resource.data.invitingUserId == getUserId() || isAdmin();
    }
    
    // Device registrations - track which devices belong to which researchers
    match /device_registrations/{deviceId} {
      allow read: if isAuthenticated() && 
                    (resource.data.researcherId == getUserId() || 
                     canReadResearchData(resource.data));
      allow write: if isAuthenticated() && 
                     (resource == null || resource.data.researcherId == getUserId());
    }
    
    // Data export requests - track and control data exports
    match /data_export_requests/{requestId} {
      allow read: if isAuthenticated() && 
                    (resource.data.requesterId == getUserId() || isAdmin());
      allow create: if isAuthenticated() && 
                      request.resource.data.requesterId == getUserId();
      allow update: if isAdmin(); // Only admins can approve/deny exports
    }
    
    // Research insights - aggregated analytics for research optimization
    match /research_insights/{insightId} {
      allow read: if isPrincipalInvestigator() || isAdmin();
      allow write: if isAdmin();
    }
    
    // Participant consent - track consent for research participants
    match /participant_consent/{consentId} {
      allow read: if canReadResearchData(resource.data);
      allow write: if canWriteResearchData(resource.data) || 
                     (resource == null && isAuthenticated());
    }
    
    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Firebase Storage security rules for research data files
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isAdmin() {
      return request.auth.token.researcherType == 'ADMIN';
    }
    
    function isPrincipalInvestigator() {
      return request.auth.token.researcherType == 'PRINCIPAL_INVESTIGATOR';
    }
    
    // Recording session files - organized by session ID
    match /recording_sessions/{sessionId}/{fileName} {
      allow read: if isAuthenticated() && 
                    (resource.metadata.researcherId == getUserId() ||
                     getUserId() in resource.metadata.collaborators ||
                     isPrincipalInvestigator() ||
                     isAdmin());
      allow write: if isAuthenticated() && 
                     (request.resource.metadata.researcherId == getUserId() ||
                      resource.metadata.researcherId == getUserId());
      allow delete: if isAuthenticated() && 
                      (resource.metadata.researcherId == getUserId() || isAdmin());
    }
    
    // Calibration files
    match /calibration_data/{researcherId}/{fileName} {
      allow read, write: if isAuthenticated() && 
                           (researcherId == getUserId() || 
                            isPrincipalInvestigator() || 
                            isAdmin());
    }
    
    // Participant data - extra security for participant files
    match /participant_data/{sessionId}/{fileName} {
      allow read: if isAuthenticated() && 
                    (resource.metadata.researcherId == getUserId() ||
                     getUserId() in resource.metadata.collaborators ||
                     isPrincipalInvestigator() ||
                     isAdmin());
      allow write: if isAuthenticated() && 
                     request.resource.metadata.researcherId == getUserId() &&
                     request.resource.metadata.hasConsentApproval == true;
      allow delete: if isAuthenticated() && 
                      (resource.metadata.researcherId == getUserId() || isAdmin());
    }
    
    // Exported data - temporary files for data export
    match /exports/{requestId}/{fileName} {
      allow read: if isAuthenticated() && 
                    (resource.metadata.requesterId == getUserId() || isAdmin());
      allow write: if isAdmin(); // Only backend can create export files
      allow delete: if isAuthenticated() && 
                      (resource.metadata.requesterId == getUserId() || isAdmin());
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}