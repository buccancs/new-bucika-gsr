[build-system]
requires = ["setuptools>=65.0", "wheel", "pybind11>=2.11.0", "cmake>=3.15"]
build-backend = "setuptools.build_meta"

[project]
name = "bucika-gsr"
version = "1.0.0"
description = "Multi-Sensor Synchronized Recording System"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Tran Duy An", email = "an.tran.20@ucl.ac.uk" }
]
keywords = ["thermal", "recording", "sensors", "android", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "PyQt6>=6.4.0",
    "opencv-python>=4.12.0",
    "numpy>=1.26.0,<2.3.0",
    "matplotlib>=3.8.0,<4.0.0",
    "requests>=2.32.0",
    "pillow>=10.4.0",
    "scipy>=1.14.0",
    "pandas>=2.2.0",
    "websockets>=13.1",
    "pylsl>=1.17.0",
    "zeroconf>=0.147.0",
    "cryptography>=41.0.0",
    "pybind11>=2.11.0",
]

[project.scripts]
bucika-gsr = "PythonApp.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=5.0.0",
    "pytest-qt>=4.4.0",
    "pytest-benchmark>=4.0.0",
    "pytest-rerunfailures>=14.0",
    "playwright>=1.48.0",
    "black>=25.1.0",
    "isort>=5.13.0",
    "mypy>=1.17.0",
    "bandit>=1.8.0",
    "pre-commit>=4.0.0",
    "flake8>=7.3.0",
    "Flask>=3.1.0",
    "Flask-SocketIO>=5.4.0",
    "python-socketio>=5.11.0",
    # Advanced testing dependencies
    "Appium-Python-Client>=3.1.0",
    "selenium>=4.23.0",
    "pytest-html>=4.1.0",
    "pytest-xdist>=3.6.0",
    "pixelmatch>=0.3.0",
    "Pillow>=10.4.0",
    "websocket-client>=1.8.0",
    "asyncio-mqtt>=0.16.0",
    "locust>=2.29.0",
    "pytest-asyncio>=0.24.0",
    "aiohttp>=3.10.0",
    "pytest-mock>=3.14.0",
]
shimmer = [
    "pyshimmer>=1.0.0",
    "pybluez>=0.23",
    "bleak>=0.22.0",
]
calibration = [
    "opencv-contrib-python>=4.12.0",
]
android = [
    "adb-shell>=0.5.0",
    "pure-python-adb>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/buccancs/bucika_gsr"
Repository = "https://github.com/buccancs/bucika_gsr.git"
Issues = "https://github.com/buccancs/bucika_gsr/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["PythonApp*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(

  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | env
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["PythonApp"]
known_third_party = ["PyQt5", "cv2", "numpy", "matplotlib", "requests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PyQt5.*",
    "matplotlib.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "test_*", "*/tests/*"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.coverage.run]
source = ["PythonApp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/env/*",
    "*/.tox/*",
    "*/site-packages/*",
    "*/build/*",
    "*/dist/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=PythonApp",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=50",
    "--junitxml=junit.xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "security: marks tests as security validation tests",
    "privacy: marks tests as privacy compliance tests",
    "gui: marks tests that require GUI components",
    "network: marks tests that require network connectivity",
    "hardware: marks tests that require physical hardware",
    # Advanced testing markers
    "e2e: marks tests as end-to-end tests",
    "visual: marks tests as visual regression tests",
    "load: marks tests as load/stress tests",
    "browser: marks tests as cross-browser compatibility tests",
    "appium: marks tests requiring Appium server",
    "android: marks tests requiring Android device/emulator",
    "hardware_loop: marks tests requiring hardware-in-the-loop setup",
]