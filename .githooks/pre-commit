#!/bin/bash

# BucikaGSR Pre-commit Hook
# This script runs before each commit to ensure code quality

echo "üîç Running BucikaGSR pre-commit checks..."

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Counter for issues found
ISSUES=0

# Check if gradlew is executable
if [ ! -x "./gradlew" ]; then
    chmod +x ./gradlew
fi

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if file exists in staged changes
is_file_staged() {
    git diff --cached --name-only | grep -q "$1"
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)
KOTLIN_FILES=$(echo "$STAGED_FILES" | grep -E '\.(kt|java)$' || true)
GRADLE_FILES=$(echo "$STAGED_FILES" | grep -E '\.gradle$|gradle\.properties$' || true)
LAYOUT_FILES=$(echo "$STAGED_FILES" | grep -E '\.xml$' | grep -E 'res/layout|res/values' || true)

print_status $GREEN "üìÅ Checking staged files..."
echo "   Kotlin/Java files: $(echo "$KOTLIN_FILES" | wc -l)"
echo "   Gradle files: $(echo "$GRADLE_FILES" | wc -l)"
echo "   Layout files: $(echo "$LAYOUT_FILES" | wc -l)"

# 1. Check for build file changes
if [ -n "$GRADLE_FILES" ]; then
    print_status $YELLOW "‚ö†Ô∏è  Gradle files changed - validating build configuration..."
    if ! ./gradlew validateBuild --quiet --no-daemon; then
        print_status $RED "‚ùå Build validation failed!"
        ISSUES=$((ISSUES + 1))
    else
        print_status $GREEN "‚úÖ Build validation passed"
    fi
fi

# 2. Run lint on staged files
if [ -n "$KOTLIN_FILES" ] || [ -n "$LAYOUT_FILES" ]; then
    print_status $YELLOW "üîç Running lint checks..."
    
    # Quick lint check
    if ! ./gradlew lintDevDebug --quiet --no-daemon; then
        print_status $YELLOW "‚ö†Ô∏è  Lint issues found. Running lintFix..."
        ./gradlew lintFix --quiet --no-daemon
        
        # Check if lintFix resolved issues
        if ! ./gradlew lintDevDebug --quiet --no-daemon; then
            print_status $RED "‚ùå Lint issues remain after auto-fix. Please review manually."
            ISSUES=$((ISSUES + 1))
        else
            print_status $GREEN "‚úÖ Lint issues auto-fixed"
        fi
    else
        print_status $GREEN "‚úÖ No lint issues found"
    fi
fi

# 3. Code quality checks for Kotlin files
if [ -n "$KOTLIN_FILES" ]; then
    print_status $YELLOW "üßπ Running code quality checks..."
    
    # Check for android.util.Log usage
    if echo "$KOTLIN_FILES" | xargs grep -l "android\.util\.Log" 2>/dev/null; then
        print_status $RED "‚ùå Found android.util.Log usage. Use XLog instead:"
        echo "$KOTLIN_FILES" | xargs grep -n "android\.util\.Log" 2>/dev/null | head -5
        ISSUES=$((ISSUES + 1))
    fi
    
    # Check for proper TODO/FIXME format
    todo_issues=$(echo "$KOTLIN_FILES" | xargs grep -n "TODO\|FIXME" 2>/dev/null | grep -v "TODO.*:\|FIXME.*:" || true)
    if [ -n "$todo_issues" ]; then
        print_status $YELLOW "‚ö†Ô∏è  TODO/FIXME without proper format found:"
        echo "$todo_issues" | head -3
        print_status $YELLOW "   Use format: TODO: description or FIXME: description"
    fi
    
    # Check for hardcoded strings in Kotlin files
    hardcoded_strings=$(echo "$KOTLIN_FILES" | xargs grep -n "\"[^\"]*[a-zA-Z][^\"]*\"" 2>/dev/null | grep -v -E "(Log|XLog|TAG|\.kt:[0-9]+:\s*(import|package))" | head -5 || true)
    if [ -n "$hardcoded_strings" ]; then
        print_status $YELLOW "‚ö†Ô∏è  Consider using string resources for user-facing text:"
        echo "$hardcoded_strings" | head -3
    fi
    
    # Check for potential security issues
    security_patterns="password.*=|secret.*=|key.*=.*\"[^\"]{8,}\""
    security_issues=$(echo "$KOTLIN_FILES" | xargs grep -in "$security_patterns" 2>/dev/null | head -3 || true)
    if [ -n "$security_issues" ]; then
        print_status $RED "üîí Potential security issue found:"
        echo "$security_issues"
        print_status $RED "   Review for hardcoded credentials"
        ISSUES=$((ISSUES + 1))
    fi
    
    # Check for proper error handling
    poor_error_handling=$(echo "$KOTLIN_FILES" | xargs grep -n "catch.*Exception.*e)" 2>/dev/null | grep -v -E "(XLog|Log|printStackTrace)" | head -3 || true)
    if [ -n "$poor_error_handling" ]; then
        print_status $YELLOW "‚ö†Ô∏è  Consider improving error handling:"
        echo "$poor_error_handling"
        print_status $YELLOW "   Add proper logging for caught exceptions"
    fi
fi

# 4. Check XML layout files
if [ -n "$LAYOUT_FILES" ]; then
    print_status $YELLOW "üì± Checking XML layout files..."
    
    xml_issues=0
    for file in $LAYOUT_FILES; do
        if [ -f "$file" ]; then
            # Check for common XML issues
            if grep -q "android:layout_width=\"wrap_content\".*android:layout_height=\"match_parent\"" "$file" 2>/dev/null; then
                print_status $YELLOW "‚ö†Ô∏è  Potential layout issue in $file: wrap_content width with match_parent height"
            fi
            
            # Check for missing contentDescription on ImageView
            if grep -q "<ImageView" "$file" && ! grep -q "contentDescription" "$file" 2>/dev/null; then
                print_status $YELLOW "‚ö†Ô∏è  Missing contentDescription in ImageView in $file (accessibility)"
            fi
        fi
    done
fi

# 5. Run a quick test to ensure nothing is broken
if [ -n "$KOTLIN_FILES" ]; then
    print_status $YELLOW "üß™ Running quick unit tests..."
    
    # Run tests only if they exist and it's not a huge change
    file_count=$(echo "$KOTLIN_FILES" | wc -l)
    if [ "$file_count" -lt 10 ]; then
        if ./gradlew testDevDebugUnitTest --quiet --no-daemon -x lint > /dev/null 2>&1; then
            print_status $GREEN "‚úÖ Quick tests passed"
        else
            print_status $YELLOW "‚ö†Ô∏è  Some tests failed. Run './gradlew test' to see details."
            # Don't fail the commit on test failures in pre-commit, but warn
        fi
    else
        print_status $YELLOW "‚ö†Ô∏è  Large changeset detected. Skipping pre-commit tests."
        print_status $YELLOW "   Please run './gradlew test' manually before pushing."
    fi
fi

# 6. Final validation
print_status $YELLOW "üîß Final validation..."

# Check that we can at least compile
if [ -n "$KOTLIN_FILES" ]; then
    if ./gradlew compileDevDebugKotlin --quiet --no-daemon > /dev/null 2>&1; then
        print_status $GREEN "‚úÖ Code compiles successfully"
    else
        print_status $RED "‚ùå Compilation failed!"
        ISSUES=$((ISSUES + 1))
    fi
fi

# Summary
echo ""
print_status $GREEN "üìä Pre-commit Summary:"
if [ $ISSUES -eq 0 ]; then
    print_status $GREEN "‚úÖ All checks passed! Commit is ready."
    echo ""
    exit 0
else
    print_status $RED "‚ùå Found $ISSUES issue(s) that need to be resolved."
    print_status $YELLOW "üí° Tips:"
    print_status $YELLOW "   - Fix the issues above and try committing again"
    print_status $YELLOW "   - Run './gradlew lintFix' to auto-fix lint issues"
    print_status $YELLOW "   - Run './gradlew test' to run all tests"
    print_status $YELLOW "   - Use 'git commit --no-verify' to skip hooks (not recommended)"
    echo ""
    exit 1
fi