// BucikaGSR Consolidate App Setup
// This file provides consolidated application setup configurations for all modules

// Common plugin configurations
project.ext.applyCommonPlugins = { Project module, boolean isApplication = false ->
    module.apply plugin: isApplication ? 'com.android.application' : 'com.android.library'
    module.apply plugin: 'kotlin-android'
    module.apply plugin: 'com.google.devtools.ksp'
    
    // Apply KSP configuration for Room and other annotation processors
    if (module.extensions.findByName('ksp')) {
        module.ksp {
            arg("room.schemaLocation", "$module.projectDir/schemas".toString())
            arg("room.incremental", "true") 
            arg("room.expandProjection", "true")
        }
    }
}

// Consolidated Android configuration
project.ext.applyConsolidatedAndroidConfig = { Project module, boolean isApplication = false ->
    module.android {
        // Apply common configuration from shared.gradle
        applyCommonConfig(module)
        
        // Additional consolidated configurations
        buildFeatures {
            buildConfig true
            viewBinding true
            dataBinding true
        }
        
        if (isApplication) {
            // Application-specific configurations
            defaultConfig {
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                multiDexEnabled true
                
                ndk {
                    abiFilters "arm64-v8a"
                }
                
                // Build config fields for application
                buildConfigField "String", "VERSION_DATE", "\"${getDateString()}\""
                
                // Manifest placeholders for push notifications
                manifestPlaceholders = [
                    JPUSH_PKGNAME : module.android.defaultConfig.applicationId ?: rootProject.ext.android.applicationId,
                    JPUSH_APPKEY : "cbd4eafc9049d751fc5a8c58",
                    JPUSH_CHANNEL : "developer-default"
                ]
            }
            
            // Signing configurations for application modules
            signingConfigs {
                debug {
                    if (file('artibox_key/ArtiBox.jks').exists()) {
                        storeFile file('artibox_key/ArtiBox.jks')
                        keyAlias 'Artibox'
                        storePassword 'artibox2017'
                        keyPassword 'artibox2017'
                    }
                }
                release {
                    if (file('artibox_key/ArtiBox.jks').exists()) {
                        storeFile file('artibox_key/ArtiBox.jks')
                        keyAlias 'Artibox'
                        storePassword 'artibox2017'
                        keyPassword 'artibox2017'
                        v1SigningEnabled true
                        v2SigningEnabled true
                    }
                }
            }
            
            // Build types for applications
            buildTypes {
                debug {
                    if (signingConfigs.debug.storeFile?.exists()) {
                        signingConfig signingConfigs.debug
                    }
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
                release {
                    if (signingConfigs.release.storeFile?.exists()) {
                        signingConfig signingConfigs.release
                    }
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            // Packaging options for applications
            packagingOptions {
                // Resolve third-party library conflicts
                merge 'META-INF/LICENSE-notice.md'
                merge 'META-INF/LICENSE.md'
                merge 'META-INF/proguard/androidx-annotations.pro'
                merge 'META-INF/proguard/coroutines.pro'
                
                pickFirst 'lib/x86/libc++_shared.so'
                pickFirst 'lib/x86_64/libc++_shared.so'
                pickFirst 'lib/arm64-v8a/libc++_shared.so'
                pickFirst 'lib/armeabi-v7a/libc++_shared.so'
                pickFirst 'META-INF/LICENSE.md'
                pickFirst 'META-INF/LICENSE-notice.md'
                pickFirst 'lib/arm64-v8a/libnative-window.so'
                pickFirst 'lib/armeabi-v7a/libnative-window.so'
                pickFirst 'lib/armeabi-v7a/libyuv.so'
                pickFirst 'lib/arm64-v8a/libyuv.so'
                pickFirst 'lib/armeabi-v7a/libopencv_java4.so'
                pickFirst 'lib/arm64-v8a/libopencv_java4.so'
                pickFirst 'lib/armeabi-v7a/libomp.so'
                pickFirst 'lib/arm64-v8a/libomp.so'
                pickFirst 'lib/arm64-v8a/liblog.so'
                pickFirst 'lib/armeabi-v7a/liblog.so'
                
                doNotStrip "**/*.so"
            }
            
        } else {
            // Library-specific configurations
            defaultConfig {
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                consumerProguardFiles "consumer-rules.pro"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
        }
        
        // Common source sets configuration
        sourceSets {
            main {
                jniLibs.srcDirs = ['src/main/jniLibs']
            }
        }
    }
}

// Enhanced product flavors with build config fields for applications
project.ext.applyProductFlavorsWithBuildConfig = { Project module ->
    module.android {
        flavorDimensions 'app'
        
        productFlavors {
            dev {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    buildConfigField "int", "ENV_TYPE", "0"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
                    manifestPlaceholders = [app_name: "TopInfrared"]
                }
            }
            
            beta {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    buildConfigField "int", "ENV_TYPE", "0"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
                    manifestPlaceholders = [app_name: "IRCamera"]
                }
            }
            
            prod {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    buildConfigField "int", "ENV_TYPE", "0"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
                    manifestPlaceholders = [app_name: "IRCamera"]
                }
            }
            
            prodTopdon {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    targetSdk 27
                    buildConfigField "int", "ENV_TYPE", "0"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared10}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared10}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared10}\"")
                    manifestPlaceholders = [app_name: "IRCamera"]
                }
            }
            
            insideChina {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    buildConfigField "int", "ENV_TYPE", "1"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfraredCN}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfraredCN}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfraredCN}\"")
                    manifestPlaceholders = [app_name: "热视界"]
                }
            }
            
            prodTopdonInsideChina {
                dimension 'app'
                if (module.plugins.hasPlugin('com.android.application')) {
                    targetSdk 27
                    buildConfigField "int", "ENV_TYPE", "1"
                    buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfraredCN10}\"")
                    buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfraredCN10}\"")
                    buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfraredCN10}\"")
                    versionCode rootProject.ext.android.versionCode + getYearFromDate().toInteger() * 10000
                    manifestPlaceholders = [app_name: "热视界"]
                }
            }
        }
    }
}

// Utility functions
static def getDateString() {
    return new Date().format('yyMMdd')
}

static def getYearFromDate() {
    return new Date().format('yy')
}

// Quick setup function for application modules
project.ext.setupApplicationModule = { Project module ->
    applyCommonPlugins(module, true)
    applyConsolidatedAndroidConfig(module, true)
    applyProductFlavorsWithBuildConfig(module)
}

// Quick setup function for library modules  
project.ext.setupLibraryModule = { Project module ->
    applyCommonPlugins(module, false)
    applyConsolidatedAndroidConfig(module, false)
    // Libraries use simpler product flavors from shared.gradle
    applyCommonConfig(module)
}

// Core dependencies that most modules will need
project.ext.addCoreDependencies = { Project module ->
    module.dependencies {
        // Core Android dependencies
        bucika_dependencies.core.each { dep ->
            implementation dep
        }
        
        // Test dependencies  
        bucika_dependencies.testing.each { dep ->
            if (dep.contains('junit:junit')) {
                testImplementation dep
            } else {
                androidTestImplementation dep
            }
        }
    }
}

// BLE/GSR specific dependencies for modules that need them
project.ext.addBleGsrDependencies = { Project module ->
    module.dependencies {
        bucika_dependencies.ble_gsr.each { dep ->
            implementation dep
        }
    }
}

// Networking dependencies for modules that need them  
project.ext.addNetworkingDependencies = { Project module ->
    module.dependencies {
        bucika_dependencies.networking.each { dep ->
            implementation dep
        }
    }
}

// UI dependencies for modules with UI components
project.ext.addUiDependencies = { Project module ->
    module.dependencies {
        bucika_dependencies.ui.each { dep ->
            implementation dep
        }
        
        // Add Glide annotation processor
        ksp "com.github.bumptech.glide:compiler:${bucika_versions.glide}"
    }
}

// Database dependencies for modules that use Room
project.ext.addDatabaseDependencies = { Project module ->
    module.dependencies {
        bucika_dependencies.database.each { dep ->
            implementation dep
        }
        
        // Add Room annotation processor
        ksp "androidx.room:room-compiler:${bucika_versions.room}"
    }
}

println "BucikaGSR consolidated app setup loaded successfully"