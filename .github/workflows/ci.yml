name: GSR CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Validate Gradle Configuration
        run: ./gradlew validateBuild --stacktrace
      
      - name: Run Lint Checks
        run: ./gradlew lintDevDebug --stacktrace
        continue-on-error: true
      
      - name: Upload Lint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: |
            **/build/reports/lint-results*.html
            **/build/reports/lint-results*.xml
          retention-days: 7
      
      - name: Comment Lint Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find lint result files
            const findLintFiles = (dir) => {
              const files = [];
              try {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                  const fullPath = path.join(dir, item);
                  if (fs.statSync(fullPath).isDirectory()) {
                    files.push(...findLintFiles(fullPath));
                  } else if (item.includes('lint-results') && item.endsWith('.xml')) {
                    files.push(fullPath);
                  }
                }
              } catch (e) {
                console.log('Error reading directory:', e.message);
              }
              return files;
            };
            
            const lintFiles = findLintFiles('.');
            console.log('Found lint files:', lintFiles);
            
            if (lintFiles.length > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Lint Results\n\n${lintFiles.length} lint report(s) generated. Please check the artifacts for detailed results.`
              });
            }

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint]
    if: always() && (needs.lint.result == 'success' || needs.lint.result == 'failure')
    
    strategy:
      matrix:
        variant: [DevDebug, BetaDebug]
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Run Unit Tests (${{ matrix.variant }})
        run: ./gradlew test${{ matrix.variant }}UnitTest --stacktrace
        continue-on-error: true
      
      - name: Generate Test Report
        if: always()
        run: ./gradlew jacocoTestReport --stacktrace
        continue-on-error: true
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.variant }}
          path: |
            **/build/test-results/**/*.xml
            **/build/reports/tests/**/*
            **/build/reports/jacoco/**/*
          retention-days: 7

  build:
    name: Build APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint]
    if: always() && (needs.lint.result == 'success' || needs.lint.result == 'failure')
    
    strategy:
      matrix:
        variant: [DevDebug, BetaDebug]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build APK (${{ matrix.variant }})
        run: ./gradlew assemble${{ matrix.variant }} --stacktrace
        continue-on-error: true
      
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.variant }}
          path: |
            app/build/outputs/apk/**/*.apk
          retention-days: 14

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint]
    if: always()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Dependency Analysis  
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Generate dependency report
        run: ./gradlew dependencies --configuration devDebugRuntimeClasspath > dependency-report.txt 2>&1
        continue-on-error: true
      
      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.txt
          retention-days: 7

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, dependency-check]
    if: always()
    
    steps:
      - name: Check CI Results
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" != "failure" && 
                "${{ needs.build.result }}" != "failure" ]]; then
            echo "‚úÖ CI Pipeline completed successfully"
            exit 0
          else
            echo "‚ùå CI Pipeline failed - check individual job results"
            exit 1
          fi