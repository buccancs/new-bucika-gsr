name: Performance Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
  schedule:
    # Run performance tests nightly
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  API_LEVEL: 29
  TARGET: google_apis
  ARCH: x86_64

jobs:
  benchmark-tests:
    name: Benchmark Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.API_LEVEL }}-${{ env.TARGET }}-${{ env.ARCH }}
      
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      
      - name: Run Performance Benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API_LEVEL }}
          target: ${{ env.TARGET }}
          arch: ${{ env.ARCH }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb logcat -c
            ./gradlew :app:connectedDevDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.topdon.tc001.benchmark.PerformanceTestSuite --stacktrace
            adb logcat -d > benchmark-logcat.txt
      
      - name: Generate Performance Report
        run: |
          mkdir -p performance-reports
          echo "# Performance Test Results - $(date)" > performance-reports/benchmark-summary.md
          echo "" >> performance-reports/benchmark-summary.md
          
          # Extract performance metrics from test results
          if [ -f "app/build/outputs/androidTest-results/connected/TEST-*.xml" ]; then
            echo "## Test Execution Summary" >> performance-reports/benchmark-summary.md
            grep -r "testcase.*time=" app/build/outputs/androidTest-results/connected/ | \
              awk -F'"' '{print "- " $4 ": " $6 "s"}' >> performance-reports/benchmark-summary.md || true
          fi
          
          echo "" >> performance-reports/benchmark-summary.md
          echo "## System Performance" >> performance-reports/benchmark-summary.md
          echo "- CPU Cores: $(nproc)" >> performance-reports/benchmark-summary.md
          echo "- Memory: $(free -h | grep Mem | awk '{print $2}')" >> performance-reports/benchmark-summary.md
          echo "- Build Time: $(date)" >> performance-reports/benchmark-summary.md
      
      - name: Upload Performance Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            performance-reports/
            benchmark-logcat.txt
            app/build/outputs/androidTest-results/**/*
          retention-days: 30
      
      - name: Comment Performance Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let performanceComment = '## 📊 Performance Test Results\n\n';
            
            if (fs.existsSync('performance-reports/benchmark-summary.md')) {
              const summary = fs.readFileSync('performance-reports/benchmark-summary.md', 'utf8');
              performanceComment += summary;
            } else {
              performanceComment += '⚠️ Performance tests completed but no detailed results available.\n';
            }
            
            performanceComment += '\n📁 Detailed performance reports are available in the artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: performanceComment
            });

  memory-profiling:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build with Memory Profiling
        run: |
          # Enable memory profiling in build
          ./gradlew assembleDevDebug \
            -Dorg.gradle.jvmargs="-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log" \
            --profile --stacktrace
      
      - name: Analyze Build Performance
        run: |
          mkdir -p performance-reports
          echo "# Build Performance Analysis - $(date)" > performance-reports/build-performance.md
          echo "" >> performance-reports/build-performance.md
          
          if [ -f "build/reports/profile/profile-*.html" ]; then
            echo "## Gradle Build Profiling" >> performance-reports/build-performance.md
            echo "Gradle build profile generated. Check artifacts for detailed HTML report." >> performance-reports/build-performance.md
          fi
          
          if [ -f "gc.log" ]; then
            echo "## Memory Usage" >> performance-reports/build-performance.md
            echo "GC log generated for memory analysis." >> performance-reports/build-performance.md
            
            # Basic GC analysis
            if command -v grep >/dev/null 2>&1; then
              gc_count=$(grep -c "GC" gc.log || echo "0")
              echo "- Total GC events: $gc_count" >> performance-reports/build-performance.md
            fi
          fi
          
          # APK size analysis
          if [ -f "app/build/outputs/apk/dev/debug/app-dev-debug.apk" ]; then
            apk_size=$(stat -f%z "app/build/outputs/apk/dev/debug/app-dev-debug.apk" 2>/dev/null || stat -c%s "app/build/outputs/apk/dev/debug/app-dev-debug.apk" 2>/dev/null || echo "Unknown")
            echo "- APK Size: $(numfmt --to=iec $apk_size)B" >> performance-reports/build-performance.md
          fi
      
      - name: Upload Memory Profiling Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: memory-profiling
          path: |
            performance-reports/
            gc.log
            build/reports/profile/
          retention-days: 14

  performance-regression:
    name: Performance Regression Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Analyze Performance Impact
        run: |
          mkdir -p performance-reports
          
          echo "# Performance Regression Analysis" > performance-reports/regression-analysis.md
          echo "" >> performance-reports/regression-analysis.md
          
          # Compare file sizes and complexity
          echo "## Code Changes Impact" >> performance-reports/regression-analysis.md
          
          # Count lines of code changes
          changed_files=$(git diff --name-only HEAD~1 -- '*.kt' '*.java' | wc -l)
          lines_added=$(git diff --numstat HEAD~1 | awk '{added += $1} END {print added+0}')
          lines_removed=$(git diff --numstat HEAD~1 | awk '{removed += $2} END {print removed+0}')
          
          echo "- Files changed: $changed_files" >> performance-reports/regression-analysis.md
          echo "- Lines added: $lines_added" >> performance-reports/regression-analysis.md
          echo "- Lines removed: $lines_removed" >> performance-reports/regression-analysis.md
          echo "- Net change: $((lines_added - lines_removed))" >> performance-reports/regression-analysis.md
          
          echo "" >> performance-reports/regression-analysis.md
          echo "## Build Time Comparison" >> performance-reports/regression-analysis.md
          
          # Time the current build
          start_time=$(date +%s)
          ./gradlew clean assembleDevDebug --quiet || true
          end_time=$(date +%s)
          build_duration=$((end_time - start_time))
          
          echo "- Current build time: ${build_duration}s" >> performance-reports/regression-analysis.md
          
          # Warn if significant changes
          if [ "$lines_added" -gt 100 ]; then
            echo "" >> performance-reports/regression-analysis.md
            echo "⚠️ **WARNING**: Significant code addition detected. Consider performance impact." >> performance-reports/regression-analysis.md
          fi
      
      - name: Upload Regression Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-analysis
          path: performance-reports/
          retention-days: 7
      
      - name: Comment Regression Analysis on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('performance-reports/regression-analysis.md')) {
              const analysis = fs.readFileSync('performance-reports/regression-analysis.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: analysis
              });
            }