name: Mobile Device Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
  schedule:
    # Run device tests nightly
    - cron: '0 1 * * *'

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  emulator-tests:
    name: Android Emulator Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        include:
          - api-level: 28
            target: default
            arch: x86_64
            profile: Nexus 6
          - api-level: 30
            target: google_apis
            arch: x86_64
            profile: pixel_5
          - api-level: 33
            target: google_apis
            arch: x86_64
            profile: Pixel 6
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}-${{ matrix.profile }}
      
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          profile: ${{ matrix.profile }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      
      - name: Run Device Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          profile: ${{ matrix.profile }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            mkdir -p device-test-results
            echo "Starting device tests on API ${{ matrix.api-level }}..."
            
            # Wait for emulator to be ready
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
            
            # Log device info
            echo "Device Info:" > device-test-results/device-info-api${{ matrix.api-level }}.txt
            adb shell getprop ro.build.version.release >> device-test-results/device-info-api${{ matrix.api-level }}.txt
            adb shell getprop ro.product.manufacturer >> device-test-results/device-info-api${{ matrix.api-level }}.txt
            adb shell getprop ro.product.model >> device-test-results/device-info-api${{ matrix.api-level }}.txt
            
            # Start logcat
            adb logcat -c
            adb logcat > device-test-results/logcat-api${{ matrix.api-level }}.txt &
            LOGCAT_PID=$!
            
            # Run instrumentation tests
            ./gradlew :app:connectedDevDebugAndroidTest \
              -Pandroid.testInstrumentationRunnerArguments.notAnnotation=androidx.test.filters.LargeTest \
              --stacktrace || true
            
            # Stop logcat
            kill $LOGCAT_PID || true
            
            # Collect test results
            if [ -d "app/build/outputs/androidTest-results" ]; then
              cp -r app/build/outputs/androidTest-results device-test-results/
            fi
            
            # Take screenshots if app is installed
            adb shell pm list packages | grep com.topdon.tc001 && {
              echo "App installed, taking screenshot..."
              adb shell screencap -p > device-test-results/screenshot-api${{ matrix.api-level }}.png || true
            } || echo "App not installed, skipping screenshot"
      
      - name: Generate Device Test Report
        if: always()
        run: |
          mkdir -p device-test-reports
          
          echo "# Device Test Report - API ${{ matrix.api-level }} - $(date)" > device-test-reports/report-api${{ matrix.api-level }}.md
          echo "" >> device-test-reports/report-api${{ matrix.api-level }}.md
          
          echo "## Test Environment" >> device-test-reports/report-api${{ matrix.api-level }}.md
          echo "- API Level: ${{ matrix.api-level }}" >> device-test-reports/report-api${{ matrix.api-level }}.md
          echo "- Target: ${{ matrix.target }}" >> device-test-reports/report-api${{ matrix.api-level }}.md
          echo "- Architecture: ${{ matrix.arch }}" >> device-test-reports/report-api${{ matrix.api-level }}.md
          echo "- Profile: ${{ matrix.profile }}" >> device-test-reports/report-api${{ matrix.api-level }}.md
          
          echo "" >> device-test-reports/report-api${{ matrix.api-level }}.md
          echo "## Test Results" >> device-test-reports/report-api${{ matrix.api-level }}.md
          
          # Parse test results if available
          if [ -f "device-test-results/androidTest-results/connected/TEST-*.xml" ]; then
            test_count=$(grep -o 'tests="[^"]*"' device-test-results/androidTest-results/connected/TEST-*.xml | cut -d'"' -f2 | head -1)
            failure_count=$(grep -o 'failures="[^"]*"' device-test-results/androidTest-results/connected/TEST-*.xml | cut -d'"' -f2 | head -1)
            error_count=$(grep -o 'errors="[^"]*"' device-test-results/androidTest-results/connected/TEST-*.xml | cut -d'"' -f2 | head -1)
            
            echo "- Total tests: ${test_count:-0}" >> device-test-reports/report-api${{ matrix.api-level }}.md
            echo "- Failures: ${failure_count:-0}" >> device-test-reports/report-api${{ matrix.api-level }}.md
            echo "- Errors: ${error_count:-0}" >> device-test-reports/report-api${{ matrix.api-level }}.md
            
            if [ "${failure_count:-0}" -eq 0 ] && [ "${error_count:-0}" -eq 0 ]; then
              echo "- Status: ✅ All tests passed" >> device-test-reports/report-api${{ matrix.api-level }}.md
            else
              echo "- Status: ❌ Tests failed" >> device-test-reports/report-api${{ matrix.api-level }}.md
            fi
          else
            echo "- Status: ⚠️ Test results not available" >> device-test-reports/report-api${{ matrix.api-level }}.md
          fi
          
          # Add device info if available
          if [ -f "device-test-results/device-info-api${{ matrix.api-level }}.txt" ]; then
            echo "" >> device-test-reports/report-api${{ matrix.api-level }}.md
            echo "## Device Information" >> device-test-reports/report-api${{ matrix.api-level }}.md
            echo "\`\`\`" >> device-test-reports/report-api${{ matrix.api-level }}.md
            cat device-test-results/device-info-api${{ matrix.api-level }}.txt >> device-test-reports/report-api${{ matrix.api-level }}.md
            echo "\`\`\`" >> device-test-reports/report-api${{ matrix.api-level }}.md
          fi
      
      - name: Upload Device Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: device-tests-api${{ matrix.api-level }}
          path: |
            device-test-results/
            device-test-reports/
          retention-days: 14

  firebase-test-lab:
    name: Firebase Test Lab
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'firebase-testing')
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build APK and Test APK
        run: |
          ./gradlew assembleDevDebug assembleDevDebugAndroidTest --stacktrace
      
      - name: Setup Google Cloud SDK
        if: env.FIREBASE_PROJECT_ID != ''
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Run Firebase Test Lab Tests
        if: env.FIREBASE_PROJECT_ID != ''
        run: |
          mkdir -p firebase-results
          
          # Upload to Firebase Test Lab
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/dev/debug/app-dev-debug.apk \
            --test app/build/outputs/apk/androidTest/dev/debug/app-dev-debug-androidTest.apk \
            --device model=Pixel2,version=28,locale=en,orientation=portrait \
            --device model=Pixel4,version=30,locale=en,orientation=portrait \
            --timeout 10m \
            --results-bucket gs://${{ secrets.FIREBASE_PROJECT_ID }}_test_results \
            --results-dir firebase-test-$(date +%Y%m%d_%H%M%S) \
            --format=json > firebase-results/test-results.json || true
        continue-on-error: true
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      
      - name: Generate Firebase Test Report
        if: env.FIREBASE_PROJECT_ID != ''
        run: |
          echo "# Firebase Test Lab Results - $(date)" > firebase-results/firebase-report.md
          echo "" >> firebase-results/firebase-report.md
          
          if [ -f "firebase-results/test-results.json" ]; then
            echo "## Test Execution" >> firebase-results/firebase-report.md
            echo "Firebase Test Lab execution completed." >> firebase-results/firebase-report.md
            echo "Check the Firebase Console for detailed results." >> firebase-results/firebase-report.md
          else
            echo "## Test Status" >> firebase-results/firebase-report.md
            echo "⚠️ Firebase Test Lab not configured or failed to execute." >> firebase-results/firebase-report.md
            echo "" >> firebase-results/firebase-report.md
            echo "To enable Firebase testing:" >> firebase-results/firebase-report.md
            echo "1. Set up a Firebase project" >> firebase-results/firebase-report.md
            echo "2. Add FIREBASE_PROJECT_ID and FIREBASE_SERVICE_ACCOUNT_KEY secrets" >> firebase-results/firebase-report.md
            echo "3. Enable Test Lab API in your project" >> firebase-results/firebase-report.md
          fi
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      
      - name: Upload Firebase Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-test-results
          path: firebase-results/
          retention-days: 14

  compatibility-testing:
    name: Android Compatibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Android Compatibility Analysis
        run: |
          mkdir -p compatibility-reports
          
          echo "# Android Compatibility Analysis - $(date)" > compatibility-reports/compatibility-report.md
          echo "" >> compatibility-reports/compatibility-report.md
          
          # Check build.gradle for compatibility settings
          echo "## SDK Configuration" >> compatibility-reports/compatibility-report.md
          
          if grep -q "compileSdk" app/build.gradle; then
            compile_sdk=$(grep "compileSdk" app/build.gradle | head -1 | awk '{print $2}' | tr -d '[:space:]')
            echo "- Compile SDK: $compile_sdk" >> compatibility-reports/compatibility-report.md
          fi
          
          if grep -q "minSdk" app/build.gradle; then
            min_sdk=$(grep "minSdk" app/build.gradle | head -1 | awk '{print $2}' | tr -d '[:space:]')
            echo "- Minimum SDK: $min_sdk" >> compatibility-reports/compatibility-report.md
          fi
          
          if grep -q "targetSdk" app/build.gradle; then
            target_sdk=$(grep "targetSdk" app/build.gradle | head -1 | awk '{print $2}' | tr -d '[:space:]')
            echo "- Target SDK: $target_sdk" >> compatibility-reports/compatibility-report.md
          fi
          
          echo "" >> compatibility-reports/compatibility-report.md
          echo "## Permission Analysis" >> compatibility-reports/compatibility-report.md
          
          # Check AndroidManifest.xml for permissions
          if [ -f "app/src/main/AndroidManifest.xml" ]; then
            perm_count=$(grep -c "uses-permission" app/src/main/AndroidManifest.xml || echo "0")
            echo "- Total permissions: $perm_count" >> compatibility-reports/compatibility-report.md
            
            # List critical permissions
            if grep -q "CAMERA\|LOCATION\|STORAGE\|MICROPHONE" app/src/main/AndroidManifest.xml; then
              echo "- ⚠️ Critical permissions detected (Camera, Location, Storage, etc.)" >> compatibility-reports/compatibility-report.md
            else
              echo "- ✅ No critical permissions detected" >> compatibility-reports/compatibility-report.md
            fi
          fi
          
          echo "" >> compatibility-reports/compatibility-report.md
          echo "## Architecture Support" >> compatibility-reports/compatibility-report.md
          
          # Check for NDK/native code
          if find . -name "*.so" -o -name "*.a" | grep -q .; then
            echo "- Native libraries detected" >> compatibility-reports/compatibility-report.md
            
            # Check ABI filters in build.gradle
            if grep -q "abiFilters" app/build.gradle; then
              echo "- ABI filters configured" >> compatibility-reports/compatibility-report.md
            else
              echo "- ⚠️ No ABI filters configured" >> compatibility-reports/compatibility-report.md
            fi
          else
            echo "- ✅ Pure Java/Kotlin project" >> compatibility-reports/compatibility-report.md
          fi
          
          echo "" >> compatibility-reports/compatibility-report.md
          echo "## Dependency Analysis" >> compatibility-reports/compatibility-report.md
          
          # Check for deprecated dependencies
          ./gradlew dependencies --configuration devDebugRuntimeClasspath > compatibility-reports/dependencies.txt 2>&1 || true
          
          if grep -q "support-v4\|support-v7" compatibility-reports/dependencies.txt; then
            echo "- ⚠️ Legacy support library dependencies detected" >> compatibility-reports/compatibility-report.md
          else
            echo "- ✅ Using AndroidX libraries" >> compatibility-reports/compatibility-report.md
          fi
          
          # Compatibility recommendations
          echo "" >> compatibility-reports/compatibility-report.md
          echo "## Recommendations" >> compatibility-reports/compatibility-report.md
          echo "- Test on multiple device sizes and densities" >> compatibility-reports/compatibility-report.md
          echo "- Verify app works on both phone and tablet form factors" >> compatibility-reports/compatibility-report.md
          echo "- Test with different Android versions" >> compatibility-reports/compatibility-report.md
          echo "- Consider right-to-left (RTL) language support" >> compatibility-reports/compatibility-report.md
          echo "- Validate accessibility features" >> compatibility-reports/compatibility-report.md
      
      - name: Upload Compatibility Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-analysis
          path: compatibility-reports/
          retention-days: 14

  device-testing-summary:
    name: Device Testing Summary
    runs-on: ubuntu-latest
    needs: [emulator-tests, firebase-test-lab, compatibility-testing]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: all-device-tests
      
      - name: Generate Device Testing Summary
        run: |
          mkdir -p device-summary
          
          echo "# Mobile Device Testing Summary - $(date)" > device-summary/device-testing-summary.md
          echo "" >> device-summary/device-testing-summary.md
          
          echo "## Test Jobs Status" >> device-summary/device-testing-summary.md
          echo "| Job | Status |" >> device-summary/device-testing-summary.md
          echo "|-----|--------|" >> device-summary/device-testing-summary.md
          echo "| Emulator Tests | ${{ needs.emulator-tests.result }} |" >> device-summary/device-testing-summary.md
          echo "| Firebase Test Lab | ${{ needs.firebase-test-lab.result }} |" >> device-summary/device-testing-summary.md
          echo "| Compatibility Testing | ${{ needs.compatibility-testing.result }} |" >> device-summary/device-testing-summary.md
          
          echo "" >> device-summary/device-testing-summary.md
          echo "## Test Coverage" >> device-summary/device-testing-summary.md
          
          # Count test artifacts
          emulator_tests=$(find all-device-tests -name "device-tests-api*" | wc -l)
          echo "- Emulator test configurations: $emulator_tests" >> device-summary/device-testing-summary.md
          
          if [ -d "all-device-tests/firebase-test-results" ]; then
            echo "- Firebase Test Lab: ✅ Executed" >> device-summary/device-testing-summary.md
          else
            echo "- Firebase Test Lab: ⚠️ Not configured" >> device-summary/device-testing-summary.md
          fi
          
          echo "- Compatibility analysis: ✅ Completed" >> device-summary/device-testing-summary.md
          
          echo "" >> device-summary/device-testing-summary.md
          echo "## Recommendations" >> device-summary/device-testing-summary.md
          echo "- Review individual test reports for detailed results" >> device-summary/device-testing-summary.md
          echo "- Address any compatibility issues found" >> device-summary/device-testing-summary.md
          echo "- Consider adding more device configurations as needed" >> device-summary/device-testing-summary.md
          echo "- Set up Firebase Test Lab for physical device testing" >> device-summary/device-testing-summary.md
          
          # Overall status
          if [[ "${{ needs.emulator-tests.result }}" == "success" && "${{ needs.compatibility-testing.result }}" == "success" ]]; then
            echo "" >> device-summary/device-testing-summary.md
            echo "## Overall Status: ✅ PASSED" >> device-summary/device-testing-summary.md
            echo "Mobile device testing completed successfully." >> device-summary/device-testing-summary.md
          else
            echo "" >> device-summary/device-testing-summary.md
            echo "## Overall Status: ⚠️ ISSUES FOUND" >> device-summary/device-testing-summary.md
            echo "Please review the test results and address any issues." >> device-summary/device-testing-summary.md
          fi
      
      - name: Upload Device Testing Summary
        uses: actions/upload-artifact@v4
        with:
          name: device-testing-summary
          path: device-summary/
          retention-days: 30
      
      - name: Comment Device Testing Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let deviceComment = '## 📱 Mobile Device Testing Results\n\n';
            
            if (fs.existsSync('device-summary/device-testing-summary.md')) {
              const summary = fs.readFileSync('device-summary/device-testing-summary.md', 'utf8');
              deviceComment += summary;
            } else {
              deviceComment += '⚠️ Device testing completed but summary not available.\n';
            }
            
            deviceComment += '\n📲 Detailed device testing reports are available in the artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: deviceComment
            });